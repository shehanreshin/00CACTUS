// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  role      UserRole   @default(CUSTOMER)
  status    UserStatus @default(INACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Contact   Contact[]
  Customer  Customer?
  Staff     Staff?
}

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
}

enum UserStatus {
  INACTIVE
  ACTIVE
  TEMP_DISABLED
  PERM_DISABLED
}

model Contact {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  country     Country @relation(fields: [countryId], references: [id])
  countryId   String
  phoneNumber String
  isDefault   Boolean

  @@unique([userId, phoneNumber])
}

model Address {
  id        String    @id @default(uuid())
  line1     String
  line2     String
  city      String
  region    String
  zipcode   String
  country   Country   @relation(fields: [countryId], references: [id])
  countryId String
  Customer  Customer?
}

model Country {
  id      String    @id @default(uuid())
  name    String
  code    String    @unique
  Contact Contact[]
  Address Address[]
}

model Customer {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @unique
}

model Staff {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
